from flask import Flask, request, jsonify, redirect
import requests
import gspread
from google.oauth2 import service_account
import os
import logging
import json
from urllib.parse import urlencode

app = Flask(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('7498464182:AAFLg-D0LSJ-5PVRlD-AfOmQPFZC8GKpOKc')
MANAGER_CHAT_ID = os.getenv('-4568620668')
SPREADSHEET_URL = os.getenv('https://docs.google.com/spreadsheets/d/1gv_CBblTjobMk2xR_1S0b61dsezAXjUqPKe82Pde0jI/edit?gid=0#gid=0')

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
keyfile_dict = json.loads(os.getenv("GOOGLE_SHEETS_CREDENTIALS"))
creds = service_account.Credentials.from_service_account_info(keyfile_dict)
file = gspread.authorize(creds)
workbook = file.open("New_ankets")
sheet = workbook.sheet1

@app.route('/')
def index():
    return redirect("https://kakovi.github.io/ankettt.github.io/templates/start.html")

@app.route('/form_cash.html')
def form_cash():
    return redirect("https://kakovi.github.io/ankettt.github.io/templates")

@app.route('/form_online.html')
def form_online():
    return redirect("https://kakovi.github.io/ankettt.github.io/templates")

def check_duplicates(accounts, cards):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞—Ä—Ç –∏ —Å—á–µ—Ç–æ–≤ –≤ Google Sheets
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google Sheets –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ A –∏ E
    all_values_a = sheet.col_values(1)  # –°—Ç–æ–ª–±–µ—Ü A –¥–ª—è –∞–Ω–∫–µ—Ç –ö–≠–®
    all_values_e = sheet.col_values(5)  # –°—Ç–æ–ª–±–µ—Ü E –¥–ª—è –∞–Ω–∫–µ—Ç –û–Ω–ª–∞–π–Ω
    all_values = all_values_a + all_values_e  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    for row in all_values:
        for account in accounts:
            if account in row:
                raise ValueError("–≠—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∂–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ.")
        for card in cards:
            if card in row:
                raise ValueError("–≠—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∂–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ.")

@app.route('/submit_cash', methods=['POST'])
def submit_cash():
    try:
        data = request.form.to_dict(flat=False)
        chat_id = data.get('chat_id', [None])[0]

        # –°–±–æ—Ä –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç –∏ —Å—á–µ—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
        accounts = {data[f'banks[{i}][account]'][0] for i in range(len([key for key in data.keys() if 'banks[' in key and '][bank]' in key]))}
        cards = set()
        for i in range(len(accounts)):
            cards.update({data[f'banks[{i}][cards][{j}]'][0] for j in range(len([key for key in data.keys() if f'banks[{i}][cards]' in key]))})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–µ–∏—Ö –∞–Ω–∫–µ—Ç–∞—Ö
        check_duplicates(accounts, cards)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
        form_data = (
            f"–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
            f"–ê–≥–µ–Ω—Ç: @yan_pay\n"
            f"–ê–¥–º–∏–Ω –≤ —á–∞—Ç–µ: @helper_kong\n\n"
            f"1. ‚Ññ –ß–∞—Ç–∞: {data['chat_number'][0]}\n"
            f"2. ID: {data['id'][0]}\n"
            f"3. –§–ò–û: {data['name'][0]}\n"
            f"4. –í–ª–∞–¥–µ–ª–µ—Ü ID: @helper_kong\n"
            f"5. IMEI: {data['imei'][0]}\n"
            f"6. –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'][0]}\n"
            f"7. –õ–∏–º–∏—Ç –¥–æ–≤–µ—Ä–∏—è, —Ä—É–±: {data['trust_limit'][0]}\n"
            f"8. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments'][0]}\n"
        )

        if 'add_to_chat' in data and data['add_to_chat'][0].strip() != "":
            form_data += f"–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç: {data['add_to_chat'][0]}\n"

        for i in range(len(accounts)):
            form_data += f"\nüè¶{i+1}\n–ë–∞–Ω–∫: {data[f'banks[{i}][bank]'][0]}\n"
            form_data += f"–°—á–µ—Ç: {data[f'banks[{i}][account]'][0]}\n"
            form_data += f"–ë–ò–ö: {data[f'banks[{i}][bik]'][0]}\n\n"

            for j in range(len([key for key in data.keys() if f'banks[{i}][cards]' in key])):
                form_data += f"üí≥–ö–∞—Ä—Ç–∞ {j+1}: {data[f'banks[{i}][cards][{j}]'][0]}\n"

        first_empty_row = len(sheet.col_values(1)) + 1
        sheet.update_cell(first_empty_row, 1, form_data)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±–µ—Ü A

        notify_manager(first_empty_row)

        if chat_id:
            send_confirmation(chat_id, form_data)

        logging.info("–ê–Ω–∫–µ—Ç–∞ –ö–≠–® —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google Sheets.")

        return redirect("https://kakovi.github.io/ankettt.github.io/templates/submitted.html")

    except ValueError as ve:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ve}")
        return redirect(f"https://kakovi.github.io/ankettt.github.io/templates/error.html?{urlencode({'error': str(ve)})}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
        return redirect(f"https://kakovi.github.io/ankettt.github.io/templates/error.html?{urlencode({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'})}")

@app.route('/submit_online', methods=['POST'])
def submit_online():
    try:
        data = request.form.to_dict(flat=False)
        chat_id = data.get('chat_id', [None])[0]

        # –°–±–æ—Ä –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç –∏ —Å—á–µ—Ç–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
        accounts = {data[f'banks[{i}][account]'][0] for i in range(len([key for key in data.keys() if 'banks[' in key and '][bank]' in key]))}
        cards = set()
        for i in range(len(accounts)):
            cards.update({data[f'banks[{i}][cards][{j}]'][0] for j in range(len([key for key in data.keys() if f'banks[{i}][cards]' in key]))})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–µ–∏—Ö –∞–Ω–∫–µ—Ç–∞—Ö
        check_duplicates(accounts, cards)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
        form_data = (
            f"–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
            f"–ê–≥–µ–Ω—Ç: @yan_pay\n"
            f"–ê–¥–º–∏–Ω –≤ —á–∞—Ç–µ: {data['owner_id'][0]}\n"
            f"1. ‚Ññ –ß–∞—Ç–∞: {data['chat_number'][0]}\n"
            f"2. ID: {data['id'][0]}\n"
            f"3. –§–ò–û: {data['name'][0]}\n"
            f"4. –í–ª–∞–¥–µ–ª–µ—Ü ID: {data['owner_id'][0]}\n"
            f"5. IMEI: {data['imei'][0]}\n"
            f"6. –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'][0]}\n"
            f"7. –õ–∏–º–∏—Ç –¥–æ–≤–µ—Ä–∏—è, —Ä—É–±: {data['trust_limit'][0]}\n"
            f"8. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments'][0]}\n"
            f"–î–µ–ø–æ–∑–∏—Ç:\n"
        )

        if 'add_to_chat' in data and data['add_to_chat'][0].strip() != "":
            form_data += f"–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç: {data['add_to_chat'][0]}\n"

        for i in range(len(accounts)):
            form_data += f"\nüè¶{i+1}\n–ë–∞–Ω–∫: {data[f'banks[{i}][bank]'][0]}\n"
            form_data += f"–°—á–µ—Ç: {data[f'banks[{i}][account]'][0]}\n"
            form_data += f"–ë–ò–ö: {data[f'banks[{i}][bik]'][0]}\n\n"

            for j in range(len([key for key in data.keys() if f'banks[{i}][cards]' in key])):
                form_data += f"üí≥–ö–∞—Ä—Ç–∞ {j+1}: {data[f'banks[{i}][cards][{j}]'][0]}\n"

        first_empty_row = len(sheet.col_values(5)) + 1
        sheet.update_cell(first_empty_row, 5, form_data)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±–µ—Ü E

        notify_manager(first_empty_row, is_online=True)

        if chat_id:
            send_confirmation(chat_id, form_data)

        logging.info("–ê–Ω–∫–µ—Ç–∞ –û–Ω–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google Sheets.")

        return redirect("https://kakovi.github.io/ankettt.github.io/templates/submitted.html")

    except ValueError as ve:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ve}")
        return redirect(f"https://kakovi.github.io/ankettt.github.io/templates/error.html?{urlencode({'error': str(ve)})}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
        return redirect(f"https://kakovi.github.io/ankettt.github.io/templates/error.html?{urlencode({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'})}")

def send_confirmation(chat_id, form_data):
    message = f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞:\n\n{form_data}"
    response = requests.post(
        f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage',
        data={
            'chat_id': chat_id,
            'text': message
        }
    )

    if response.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}: {response.json()}")
    else:
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id: {chat_id}")

def notify_manager(row_number, is_online=False):
    column_letter = "E" if is_online else "A"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü E –¥–ª—è –∞–Ω–∫–µ—Ç "–û–Ω–ª–∞–π–Ω", A –¥–ª—è "–ü–æ–¥ –ö–≠–®"
    cell_link = f"{SPREADSHEET_URL}&range={column_letter}{row_number}"
    message = f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –≤ Google –¢–∞–±–ª–∏—Ü–µ:\n{cell_link}"
    
    response = requests.post(
        f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage',
        data={
            'chat_id': MANAGER_CHAT_ID,
            'text': message
        }
    )

    if response.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {response.json()}")
    else:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

@app.route('/webhook', methods=['POST'])
def webhook():
    update = request.get_json()
    if 'message' in update and 'text' in update['message']:
        text = update['message']['text']
        chat_id = update['message']['chat']['id']
        
        if text == '/start':
            keyboard = {
                'inline_keyboard': [[{
                    'text': '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É',
                    'web_app': {'url': f'https://kakovi.github.io/ankettt.github.io/templates/start.html'}
                }]]
            }

            response = requests.post(
                f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage',
                data={
                    'chat_id': chat_id,
                    'text': '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:',
                    'reply_markup': json.dumps(keyboard)
                }
            )

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.json()}")
    
    return jsonify({"status": "ok"})

if __name__ == '__main__':
    app.run(debug=True, port=5000)
